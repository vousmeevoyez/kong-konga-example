version: "3.9"
services:
    database:
        build:
          context: docker
          dockerfile: postgres.dockerfile 
        environment:
          POSTGRES_PASSWORD: master
        healthcheck:
          test: ["CMD", "pg_isready", "-U", "postgres"]
          interval: 10s
          timeout: 5s
          retries: 3
          start_period: 30s
        restart: on-failure
        stdin_open: true
        tty: true
        ports: 
          - 5432:5432
        networks:
        - kong-net
        
    kong-migrations:
      image: kong:latest
      entrypoint: sh -c "sleep 10 && kong migrations bootstrap -v"
      environment:
        KONG_DATABASE: ${KONG_DATABASE}
        KONG_PG_HOST: ${KONG_DB_HOST}
        KONG_PG_DATABASE: ${KONG_DB_NAME}
        KONG_PG_USER: ${KONG_DB_USERNAME}
        KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      depends_on:
       database:
          condition: service_healthy
      networks:
      - kong-net
      restart: on-failure

    kong:
      image: kong:latest
      restart: on-failure
      environment:
        KONG_DATABASE: ${KONG_DATABASE}
        KONG_PG_HOST: ${KONG_DB_HOST}
        KONG_PG_DATABASE: ${KONG_DB_NAME}
        KONG_PG_USER: ${KONG_DB_USERNAME}
        KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
        KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
        KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
        KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
        KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
        KONG_ADMIN_LISTEN: 0.0.0.0:8001
      depends_on: 
        kong-migrations:
          condition: service_completed_successfully
      ports:
      - $KONG_PROXY_PORT:8000
      - $KONG_PROXY_SSL_PORT:8443
      - ${KONG_PROXY_ADMIN_API_PORT}
        #- $KONG_PROXY_ADMIN_API_PORT:8001
        #- $KONG_PROXY_ADMIN_SSL_API_PORT:8444
      networks:
      - kong-net

    setup:
      build: 
        context: docker
        dockerfile: setup.dockerfile
      restart: on-failure
      environment:
        KONG_HOST: kong
        KONG_PORT: ${KONG_PROXY_ADMIN_API_PORT}
        ADMIN_ROUTE: ${ADMIN_ROUTE}
        KONGA_CONSUMER_ID: ${KONGA_CONSUMER_ID}
        AUTH_KEY: ${KONG_API_TOKEN}
      depends_on: 
        kong:
          condition: service_started
      networks:
      - kong-net

    konga-prepare:
      image: pantsel/konga
      command: "-c prepare -a postgres -u postgresql://${KONGA_DB_USERNAME}:${KONGA_DB_PASSWORD}@${KONGA_DB_HOST}:5432/${KONGA_DB_NAME}"
      networks:
        - kong-net
      restart: on-failure
      depends_on:
        database:
          condition: service_healthy

    konga:
      image: pantsel/konga
      environment:
        TOKEN_SECRET: ${KONGA_TOKEN_SECRET}
        DB_ADAPTER: ${KONG_DATABASE}
        DB_HOST: ${KONGA_DB_HOST}
        DB_PORT: ${KONGA_DB_PORT}
        DB_DATABASE: ${KONGA_DB_NAME}
        DB_USER: ${KONGA_DB_USERNAME}
        DB_PASSWORD: ${KONGA_DB_PASSWORD}
        NODE_ENV: ${KONGA_ENV}
        KONGA_HOOK_TIMEOUT: 10000
      restart: on-failure
      ports:
      - $KONGA_PORT:1337
      depends_on:
        konga-prepare:
          condition: service_completed_successfully
        setup: 
          condition: service_completed_successfully
      networks:
      - kong-net
        
networks:
  kong-net:
    external: true
